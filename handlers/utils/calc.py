from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from aiogram import Router
from aiogram import F

from states.calc import CalcState

from src.parse.pairs import parse_kzt_to_rub

router = Router()

@router.message(F.text == "üí∞–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def handle_calc(message: Message, state: FSMContext):
    await message.answer("–°–µ–π—á–∞—Å –ø–æ—Å—á–∏—Ç–∞–µ–º... –ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –ö–ó–¢")

    await state.set_state(CalcState.price_tg)

@router.message(CalcState.price_tg)
async def return_calc(message: Message, state: FSMContext):
    try:
        price = float(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    await state.update_data(price_tg=price)
    pair_price = await parse_kzt_to_rub()

    price_no_return_kzt = int(price + (price * 0.1))
    price_with_return_kzt = int(price + (price * 0.2))

    price_no_return = round(price_no_return_kzt * pair_price, 2)
    price_with_return = round(price_with_return_kzt * pair_price, 2)

    await message.answer(
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ (–±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞) = {price_no_return}–† ({price_no_return_kzt}–ö–ó–¢)\n"
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ (—Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º) = {price_with_return}–† ({price_with_return_kzt}–ö–ó–¢)"
    )

    await state.clear()
